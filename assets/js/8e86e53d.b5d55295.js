"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[351],{7342:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>t});const l=JSON.parse('{"id":"c_fundamentals/build-deploy","title":"Building and Running a C Program","description":"Overview","source":"@site/docs/01_c_fundamentals/05_build-deploy.md","sourceDirName":"01_c_fundamentals","slug":"/c_fundamentals/build-deploy","permalink":"/C/docs/c_fundamentals/build-deploy","draft":false,"unlisted":false,"editUrl":"https://github.com/CagriCatik/C/edit/main/docs/01_c_fundamentals/05_build-deploy.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"cProgrammingFundamentalsSidebar","previous":{"title":"Creating a C Program","permalink":"/C/docs/c_fundamentals/c-program"},"next":{"title":"Compiler Errors","permalink":"/C/docs/c_fundamentals/compiler-errors"}}');var s=i(4848),r=i(8453);const a={},o="Building and Running a C Program",d={},t=[{value:"Overview",id:"overview",level:2},{value:"Source Code Example",id:"source-code-example",level:2},{value:"Steps to Build and Run the Program",id:"steps-to-build-and-run-the-program",level:2},{value:"Compilation",id:"compilation",level:3},{value:"Linking",id:"linking",level:3},{value:"Building",id:"building",level:3},{value:"Makefile Example",id:"makefile-example",level:4},{value:"Running the Program",id:"running-the-program",level:3},{value:"Development Environment Commands",id:"development-environment-commands",level:3},{value:"Detailed Explanation of Clean and Build Processes",id:"detailed-explanation-of-clean-and-build-processes",level:3},{value:"Clean Process",id:"clean-process",level:4},{value:"Build Process",id:"build-process",level:4},{value:"Debug and Release Builds",id:"debug-and-release-builds",level:3},{value:"Summary",id:"summary",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"building-and-running-a-c-program",children:"Building and Running a C Program"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"This tutorial provides a detailed, scientific explanation of how to build and run a C program. It covers the steps from compiling individual source files to creating an executable, addressing common procedures and potential pitfalls. This guide assumes familiarity with basic programming concepts and a development environment setup."}),"\n",(0,s.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsx)(n.p,{children:"Below is a simple C program that prompts the user to enter their favorite number and then prints it out."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n\nint main() {\n    int favoriteNumber;\n    printf("Enter your favorite number: ");\n    scanf("%d", &favoriteNumber);\n    printf("You entered: %d\\n", favoriteNumber);\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"steps-to-build-and-run-the-program",children:"Steps to Build and Run the Program"}),"\n",(0,s.jsx)(n.h3,{id:"compilation",children:"Compilation"}),"\n",(0,s.jsxs)(n.p,{children:["Compilation is the process of converting source code into object files (",(0,s.jsx)(n.code,{children:".o"})," files). This step checks for syntax errors and generates machine code for the source files."]}),"\n",(0,s.jsx)(n.p,{children:"To compile the example program, use the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcc -c main.c -o main.o\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This command tells the GCC compiler to compile ",(0,s.jsx)(n.code,{children:"main.c"})," into an object file named ",(0,s.jsx)(n.code,{children:"main.o"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"linking",children:"Linking"}),"\n",(0,s.jsx)(n.p,{children:"Linking combines multiple object files and libraries into a single executable. It resolves references between object files and includes external libraries."}),"\n",(0,s.jsx)(n.p,{children:"To link the object file and create an executable, use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcc main.o -o my_program\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This command links ",(0,s.jsx)(n.code,{children:"main.o"})," and creates an executable named ",(0,s.jsx)(n.code,{children:"my_program"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"building",children:"Building"}),"\n",(0,s.jsx)(n.p,{children:"Building generally refers to both compiling and linking. For larger projects with multiple source files, a build system (like Make) can manage dependencies and compile steps."}),"\n",(0,s.jsx)(n.h4,{id:"makefile-example",children:"Makefile Example"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"Makefile"})," automates the build process. Here is a simple ",(0,s.jsx)(n.code,{children:"Makefile"})," for the example program:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-makefile",children:"# Makefile for simple C program\n\nCC = gcc\nCFLAGS = -Wall -g\nTARGET = my_program\nOBJS = main.o\n\nall: $(TARGET)\n\n$(TARGET): $(OBJS)\n\t$(CC) $(OBJS) -o $(TARGET)\n\n%.o: %.c\n\t$(CC) $(CFLAGS) -c $< -o $@\n\nclean:\n\trm -f $(OBJS) $(TARGET)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To build the program using this ",(0,s.jsx)(n.code,{children:"Makefile"}),", simply run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"make\n"})}),"\n",(0,s.jsx)(n.p,{children:"To clean up object files and the executable, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"make clean\n"})}),"\n",(0,s.jsx)(n.h3,{id:"running-the-program",children:"Running the Program"}),"\n",(0,s.jsx)(n.p,{children:"After building the executable, you can run the program by typing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./my_program\n"})}),"\n",(0,s.jsx)(n.p,{children:"The program will prompt you to enter your favorite number and then display it."}),"\n",(0,s.jsx)(n.h3,{id:"development-environment-commands",children:"Development Environment Commands"}),"\n",(0,s.jsx)(n.p,{children:"In most integrated development environments (IDEs), you can compile, link, and run your program using menu options and buttons. Below are general steps applicable to many IDEs:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compile the Source File"}),': Right-click the source file and select "Compile," or use the IDE\'s build menu to compile the current file.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clean the Project"}),': Use the "Clean" option in the build menu to remove old object files and executables.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build the Project"}),': Select "Build" to compile and link all source files in the project.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Run the Executable"}),': Ensure the project is set as the active project, then use the "Run" option to execute the program.']}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"detailed-explanation-of-clean-and-build-processes",children:"Detailed Explanation of Clean and Build Processes"}),"\n",(0,s.jsx)(n.h4,{id:"clean-process",children:"Clean Process"}),"\n",(0,s.jsx)(n.p,{children:"The clean process removes all generated files (object files, executables, and other artifacts) from previous builds. This is useful when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"There are unexplained errors."}),"\n",(0,s.jsx)(n.li,{children:"Ensuring a fresh build of all source files."}),"\n",(0,s.jsx)(n.li,{children:"Resolving dependency issues."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"To clean the project, use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"make clean\n"})}),"\n",(0,s.jsx)(n.p,{children:'In an IDE, select the "Clean" option from the build menu.'}),"\n",(0,s.jsx)(n.h4,{id:"build-process",children:"Build Process"}),"\n",(0,s.jsxs)(n.p,{children:['The build process consists of compiling source files and linking them to create an executable. In IDEs, the "Build" option handles this, while in command-line environments, ',(0,s.jsx)(n.code,{children:"make"})," or manual commands accomplish this task."]}),"\n",(0,s.jsx)(n.p,{children:"When building, ensure:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"All source files are compiled."}),"\n",(0,s.jsx)(n.li,{children:"All dependencies are linked."}),"\n",(0,s.jsx)(n.li,{children:"The executable is correctly generated."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debug-and-release-builds",children:"Debug and Release Builds"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Debug Build"}),": Includes debugging information, useful during development."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Release Build"}),": Optimized for performance, without debugging information."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To build for release, set appropriate compiler flags, such as ",(0,s.jsx)(n.code,{children:"-O2"})," for optimization:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcc -O2 main.c -o my_program\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In a ",(0,s.jsx)(n.code,{children:"Makefile"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-makefile",children:"CFLAGS = -Wall -O2\n"})}),"\n",(0,s.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial covered the essential steps to compile, link, and run a simple C program, using both command-line tools and integrated development environments. It also explained the importance of cleaning the build environment and provided examples of ",(0,s.jsx)(n.code,{children:"Makefile"})," usage for automation."]}),"\n",(0,s.jsx)(n.p,{children:"By following these steps, you can efficiently manage the build process, troubleshoot issues, and ensure a smooth development workflow."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var l=i(6540);const s={},r=l.createContext(s);function a(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);